##LAB 3.1. SQL JOINS

## Write SQL queries to perform the following tasks using the Sakila database:

USE sakila;


## List the number of films per category.

SELECT name as "Category", COUNT(*) as "Number of Films"
FROM sakila.film
LEFT JOIN sakila.film_category
    USING (film_id)
LEFT JOIN sakila.category
	USING (category_id)
GROUP BY name
ORDER BY name;

## Retrieve the store ID, city, and country for each store.
## Calculate the total revenue generated by each store in dollars.

SELECT
    store.store_id,
    SUM(payment.amount) AS total_amount
FROM
    sakila.store
LEFT JOIN
    sakila.address ON store.address_id = address.address_id
LEFT JOIN
    sakila.city ON address.city_id = city.city_id
LEFT JOIN
    sakila.staff ON store.store_id = staff.store_id
LEFT JOIN
    sakila.payment ON staff.staff_id = payment.staff_id
GROUP BY
    store.store_id;

## Determine the average running time of films for each category.

SELECT name as "Category", COUNT(*) as "Number of Films", ROUND(AVG(length),2) / 60 AS "Average Length (Hours)"
FROM sakila.film
LEFT JOIN sakila.film_category
    USING (film_id)
LEFT JOIN sakila.category
	USING (category_id)
GROUP BY name
ORDER BY 3 DESC; ##when I tried using "Average Length (Hours)" it didn't work. We can use "3" that indicates the position of the column in the select clause

## Bonus:

## 5. Identify the film categories with the longest average running time.
## We can use the same selection as above and limit the number to the top 3 for example
SELECT name as "Category", COUNT(*) as "Number of Films", ROUND(AVG(length),2) / 60 AS "Average Length (Hours)"
FROM sakila.film
LEFT JOIN sakila.film_category
    USING (film_id)
LEFT JOIN sakila.category
	USING (category_id)
GROUP BY name
ORDER BY 3 DESC
LIMIT 3;

## 6. Display the top 10 most frequently rented movies in descending order.

SELECT title as "Film", COUNT(inventory_id) as "Times Rented"
FROM
	sakila.rental
LEFT JOIN sakila.inventory
	USING (inventory_id)
LEFT JOIN sakila.film
	USING (film_id)
GROUP BY 
	title
ORDER BY
	2 DESC
LIMIT
	10;

## 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT DISTINCT film.title, inventory.store_id
FROM sakila.film
LEFT JOIN sakila.inventory
	USING (film_id)
HAVING title = "Academy Dinosaur" AND inventory.store_id = 1;

## 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT
    film.title,
    CASE 
        WHEN inventory.inventory_id IS NULL THEN 'NOT available'
        ELSE 'Available'
    END AS availabile_in_inventory
FROM
    sakila.film
LEFT JOIN
    sakila.inventory ON film.film_id = inventory.film_id;

## when you left join the inventory table, there will be films with null value in the inventory_id
